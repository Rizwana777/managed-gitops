// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redhat-appstudio/managed-gitops/backend-shared/db (interfaces: DatabaseQueries)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/redhat-appstudio/managed-gitops/backend-shared/db"
)

// MockDatabaseQueries is a mock of DatabaseQueries interface.
type MockDatabaseQueries struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseQueriesMockRecorder
}

// MockDatabaseQueriesMockRecorder is the mock recorder for MockDatabaseQueries.
type MockDatabaseQueriesMockRecorder struct {
	mock *MockDatabaseQueries
}

// NewMockDatabaseQueries creates a new mock instance.
func NewMockDatabaseQueries(ctrl *gomock.Controller) *MockDatabaseQueries {
	mock := &MockDatabaseQueries{ctrl: ctrl}
	mock.recorder = &MockDatabaseQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseQueries) EXPECT() *MockDatabaseQueriesMockRecorder {
	return m.recorder
}

// CheckedCreateApplication mocks base method.
func (m *MockDatabaseQueries) CheckedCreateApplication(arg0 context.Context, arg1 *db.Application, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedCreateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedCreateApplication indicates an expected call of CheckedCreateApplication.
func (mr *MockDatabaseQueriesMockRecorder) CheckedCreateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedCreateApplication", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedCreateApplication), arg0, arg1, arg2)
}

// CheckedDeleteApplicationById mocks base method.
func (m *MockDatabaseQueries) CheckedDeleteApplicationById(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedDeleteApplicationById", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckedDeleteApplicationById indicates an expected call of CheckedDeleteApplicationById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedDeleteApplicationById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedDeleteApplicationById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedDeleteApplicationById), arg0, arg1, arg2)
}

// CheckedDeleteDeploymentToApplicationMappingByDeplId mocks base method.
func (m *MockDatabaseQueries) CheckedDeleteDeploymentToApplicationMappingByDeplId(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedDeleteDeploymentToApplicationMappingByDeplId", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckedDeleteDeploymentToApplicationMappingByDeplId indicates an expected call of CheckedDeleteDeploymentToApplicationMappingByDeplId.
func (mr *MockDatabaseQueriesMockRecorder) CheckedDeleteDeploymentToApplicationMappingByDeplId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedDeleteDeploymentToApplicationMappingByDeplId", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedDeleteDeploymentToApplicationMappingByDeplId), arg0, arg1, arg2)
}

// CheckedDeleteGitopsEngineInstanceById mocks base method.
func (m *MockDatabaseQueries) CheckedDeleteGitopsEngineInstanceById(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedDeleteGitopsEngineInstanceById", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckedDeleteGitopsEngineInstanceById indicates an expected call of CheckedDeleteGitopsEngineInstanceById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedDeleteGitopsEngineInstanceById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedDeleteGitopsEngineInstanceById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedDeleteGitopsEngineInstanceById), arg0, arg1, arg2)
}

// CheckedDeleteManagedEnvironmentById mocks base method.
func (m *MockDatabaseQueries) CheckedDeleteManagedEnvironmentById(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedDeleteManagedEnvironmentById", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckedDeleteManagedEnvironmentById indicates an expected call of CheckedDeleteManagedEnvironmentById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedDeleteManagedEnvironmentById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedDeleteManagedEnvironmentById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedDeleteManagedEnvironmentById), arg0, arg1, arg2)
}

// CheckedDeleteOperationById mocks base method.
func (m *MockDatabaseQueries) CheckedDeleteOperationById(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedDeleteOperationById", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckedDeleteOperationById indicates an expected call of CheckedDeleteOperationById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedDeleteOperationById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedDeleteOperationById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedDeleteOperationById), arg0, arg1, arg2)
}

// CheckedGetApplicationById mocks base method.
func (m *MockDatabaseQueries) CheckedGetApplicationById(arg0 context.Context, arg1 *db.Application, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedGetApplicationById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedGetApplicationById indicates an expected call of CheckedGetApplicationById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedGetApplicationById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedGetApplicationById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedGetApplicationById), arg0, arg1, arg2)
}

// CheckedGetClusterCredentialsById mocks base method.
func (m *MockDatabaseQueries) CheckedGetClusterCredentialsById(arg0 context.Context, arg1 *db.ClusterCredentials, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedGetClusterCredentialsById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedGetClusterCredentialsById indicates an expected call of CheckedGetClusterCredentialsById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedGetClusterCredentialsById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedGetClusterCredentialsById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedGetClusterCredentialsById), arg0, arg1, arg2)
}

// CheckedGetDeploymentToApplicationMappingByDeplId mocks base method.
func (m *MockDatabaseQueries) CheckedGetDeploymentToApplicationMappingByDeplId(arg0 context.Context, arg1 *db.DeploymentToApplicationMapping, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedGetDeploymentToApplicationMappingByDeplId", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedGetDeploymentToApplicationMappingByDeplId indicates an expected call of CheckedGetDeploymentToApplicationMappingByDeplId.
func (mr *MockDatabaseQueriesMockRecorder) CheckedGetDeploymentToApplicationMappingByDeplId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedGetDeploymentToApplicationMappingByDeplId", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedGetDeploymentToApplicationMappingByDeplId), arg0, arg1, arg2)
}

// CheckedGetGitopsEngineClusterById mocks base method.
func (m *MockDatabaseQueries) CheckedGetGitopsEngineClusterById(arg0 context.Context, arg1 *db.GitopsEngineCluster, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedGetGitopsEngineClusterById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedGetGitopsEngineClusterById indicates an expected call of CheckedGetGitopsEngineClusterById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedGetGitopsEngineClusterById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedGetGitopsEngineClusterById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedGetGitopsEngineClusterById), arg0, arg1, arg2)
}

// CheckedGetGitopsEngineInstanceById mocks base method.
func (m *MockDatabaseQueries) CheckedGetGitopsEngineInstanceById(arg0 context.Context, arg1 *db.GitopsEngineInstance, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedGetGitopsEngineInstanceById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedGetGitopsEngineInstanceById indicates an expected call of CheckedGetGitopsEngineInstanceById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedGetGitopsEngineInstanceById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedGetGitopsEngineInstanceById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedGetGitopsEngineInstanceById), arg0, arg1, arg2)
}

// CheckedGetManagedEnvironmentById mocks base method.
func (m *MockDatabaseQueries) CheckedGetManagedEnvironmentById(arg0 context.Context, arg1 *db.ManagedEnvironment, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedGetManagedEnvironmentById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedGetManagedEnvironmentById indicates an expected call of CheckedGetManagedEnvironmentById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedGetManagedEnvironmentById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedGetManagedEnvironmentById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedGetManagedEnvironmentById), arg0, arg1, arg2)
}

// CheckedGetOperationById mocks base method.
func (m *MockDatabaseQueries) CheckedGetOperationById(arg0 context.Context, arg1 *db.Operation, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedGetOperationById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedGetOperationById indicates an expected call of CheckedGetOperationById.
func (mr *MockDatabaseQueriesMockRecorder) CheckedGetOperationById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedGetOperationById", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedGetOperationById), arg0, arg1, arg2)
}

// CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId mocks base method.
func (m *MockDatabaseQueries) CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId(arg0 context.Context, arg1, arg2 string, arg3 *[]db.GitopsEngineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId indicates an expected call of CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId.
func (mr *MockDatabaseQueriesMockRecorder) CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedListAllGitopsEngineInstancesForGitopsEngineClusterIdAndOwnerId), arg0, arg1, arg2, arg3)
}

// CheckedListClusterCredentialsByHost mocks base method.
func (m *MockDatabaseQueries) CheckedListClusterCredentialsByHost(arg0 context.Context, arg1 string, arg2 *[]db.ClusterCredentials, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedListClusterCredentialsByHost", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedListClusterCredentialsByHost indicates an expected call of CheckedListClusterCredentialsByHost.
func (mr *MockDatabaseQueriesMockRecorder) CheckedListClusterCredentialsByHost(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedListClusterCredentialsByHost", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedListClusterCredentialsByHost), arg0, arg1, arg2, arg3)
}

// CheckedListGitopsEngineClusterByCredentialId mocks base method.
func (m *MockDatabaseQueries) CheckedListGitopsEngineClusterByCredentialId(arg0 context.Context, arg1 string, arg2 *[]db.GitopsEngineCluster, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedListGitopsEngineClusterByCredentialId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckedListGitopsEngineClusterByCredentialId indicates an expected call of CheckedListGitopsEngineClusterByCredentialId.
func (mr *MockDatabaseQueriesMockRecorder) CheckedListGitopsEngineClusterByCredentialId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedListGitopsEngineClusterByCredentialId", reflect.TypeOf((*MockDatabaseQueries)(nil).CheckedListGitopsEngineClusterByCredentialId), arg0, arg1, arg2, arg3)
}

// CloseDatabase mocks base method.
func (m *MockDatabaseQueries) CloseDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDatabase")
}

// CloseDatabase indicates an expected call of CloseDatabase.
func (mr *MockDatabaseQueriesMockRecorder) CloseDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDatabase", reflect.TypeOf((*MockDatabaseQueries)(nil).CloseDatabase))
}

// CountAppProjectManagedEnvironmentByClusterUserID mocks base method.
func (m *MockDatabaseQueries) CountAppProjectManagedEnvironmentByClusterUserID(arg0 context.Context, arg1 *db.AppProjectManagedEnvironment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAppProjectManagedEnvironmentByClusterUserID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAppProjectManagedEnvironmentByClusterUserID indicates an expected call of CountAppProjectManagedEnvironmentByClusterUserID.
func (mr *MockDatabaseQueriesMockRecorder) CountAppProjectManagedEnvironmentByClusterUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAppProjectManagedEnvironmentByClusterUserID", reflect.TypeOf((*MockDatabaseQueries)(nil).CountAppProjectManagedEnvironmentByClusterUserID), arg0, arg1)
}

// CountAppProjectRepositoryByClusterUserID mocks base method.
func (m *MockDatabaseQueries) CountAppProjectRepositoryByClusterUserID(arg0 context.Context, arg1 *db.AppProjectRepository) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAppProjectRepositoryByClusterUserID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAppProjectRepositoryByClusterUserID indicates an expected call of CountAppProjectRepositoryByClusterUserID.
func (mr *MockDatabaseQueriesMockRecorder) CountAppProjectRepositoryByClusterUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAppProjectRepositoryByClusterUserID", reflect.TypeOf((*MockDatabaseQueries)(nil).CountAppProjectRepositoryByClusterUserID), arg0, arg1)
}

// CountOperationDBRowsByState mocks base method.
func (m *MockDatabaseQueries) CountOperationDBRowsByState(arg0 context.Context, arg1 *db.Operation) ([]db.OperationStateCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOperationDBRowsByState", arg0, arg1)
	ret0, _ := ret[0].([]db.OperationStateCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOperationDBRowsByState indicates an expected call of CountOperationDBRowsByState.
func (mr *MockDatabaseQueriesMockRecorder) CountOperationDBRowsByState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOperationDBRowsByState", reflect.TypeOf((*MockDatabaseQueries)(nil).CountOperationDBRowsByState), arg0, arg1)
}

// CountTotalOperationDBRows mocks base method.
func (m *MockDatabaseQueries) CountTotalOperationDBRows(arg0 context.Context, arg1 *db.Operation) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalOperationDBRows", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalOperationDBRows indicates an expected call of CountTotalOperationDBRows.
func (mr *MockDatabaseQueriesMockRecorder) CountTotalOperationDBRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalOperationDBRows", reflect.TypeOf((*MockDatabaseQueries)(nil).CountTotalOperationDBRows), arg0, arg1)
}

// CreateAPICRToDatabaseMapping mocks base method.
func (m *MockDatabaseQueries) CreateAPICRToDatabaseMapping(arg0 context.Context, arg1 *db.APICRToDatabaseMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPICRToDatabaseMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPICRToDatabaseMapping indicates an expected call of CreateAPICRToDatabaseMapping.
func (mr *MockDatabaseQueriesMockRecorder) CreateAPICRToDatabaseMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPICRToDatabaseMapping", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateAPICRToDatabaseMapping), arg0, arg1)
}

// CreateAppProjectManagedEnvironment mocks base method.
func (m *MockDatabaseQueries) CreateAppProjectManagedEnvironment(arg0 context.Context, arg1 *db.AppProjectManagedEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppProjectManagedEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppProjectManagedEnvironment indicates an expected call of CreateAppProjectManagedEnvironment.
func (mr *MockDatabaseQueriesMockRecorder) CreateAppProjectManagedEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppProjectManagedEnvironment", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateAppProjectManagedEnvironment), arg0, arg1)
}

// CreateAppProjectRepository mocks base method.
func (m *MockDatabaseQueries) CreateAppProjectRepository(arg0 context.Context, arg1 *db.AppProjectRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppProjectRepository", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppProjectRepository indicates an expected call of CreateAppProjectRepository.
func (mr *MockDatabaseQueriesMockRecorder) CreateAppProjectRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppProjectRepository", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateAppProjectRepository), arg0, arg1)
}

// CreateApplication mocks base method.
func (m *MockDatabaseQueries) CreateApplication(arg0 context.Context, arg1 *db.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockDatabaseQueriesMockRecorder) CreateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateApplication), arg0, arg1)
}

// CreateApplicationOwner mocks base method.
func (m *MockDatabaseQueries) CreateApplicationOwner(arg0 context.Context, arg1 *db.ApplicationOwner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationOwner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationOwner indicates an expected call of CreateApplicationOwner.
func (mr *MockDatabaseQueriesMockRecorder) CreateApplicationOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationOwner", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateApplicationOwner), arg0, arg1)
}

// CreateApplicationState mocks base method.
func (m *MockDatabaseQueries) CreateApplicationState(arg0 context.Context, arg1 *db.ApplicationState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationState indicates an expected call of CreateApplicationState.
func (mr *MockDatabaseQueriesMockRecorder) CreateApplicationState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationState", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateApplicationState), arg0, arg1)
}

// CreateClusterAccess mocks base method.
func (m *MockDatabaseQueries) CreateClusterAccess(arg0 context.Context, arg1 *db.ClusterAccess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterAccess indicates an expected call of CreateClusterAccess.
func (mr *MockDatabaseQueriesMockRecorder) CreateClusterAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterAccess", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateClusterAccess), arg0, arg1)
}

// CreateClusterCredentials mocks base method.
func (m *MockDatabaseQueries) CreateClusterCredentials(arg0 context.Context, arg1 *db.ClusterCredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterCredentials", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterCredentials indicates an expected call of CreateClusterCredentials.
func (mr *MockDatabaseQueriesMockRecorder) CreateClusterCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterCredentials", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateClusterCredentials), arg0, arg1)
}

// CreateClusterUser mocks base method.
func (m *MockDatabaseQueries) CreateClusterUser(arg0 context.Context, arg1 *db.ClusterUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterUser indicates an expected call of CreateClusterUser.
func (mr *MockDatabaseQueriesMockRecorder) CreateClusterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterUser", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateClusterUser), arg0, arg1)
}

// CreateDeploymentToApplicationMapping mocks base method.
func (m *MockDatabaseQueries) CreateDeploymentToApplicationMapping(arg0 context.Context, arg1 *db.DeploymentToApplicationMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentToApplicationMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeploymentToApplicationMapping indicates an expected call of CreateDeploymentToApplicationMapping.
func (mr *MockDatabaseQueriesMockRecorder) CreateDeploymentToApplicationMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentToApplicationMapping", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateDeploymentToApplicationMapping), arg0, arg1)
}

// CreateGitopsEngineCluster mocks base method.
func (m *MockDatabaseQueries) CreateGitopsEngineCluster(arg0 context.Context, arg1 *db.GitopsEngineCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitopsEngineCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGitopsEngineCluster indicates an expected call of CreateGitopsEngineCluster.
func (mr *MockDatabaseQueriesMockRecorder) CreateGitopsEngineCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitopsEngineCluster", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateGitopsEngineCluster), arg0, arg1)
}

// CreateGitopsEngineInstance mocks base method.
func (m *MockDatabaseQueries) CreateGitopsEngineInstance(arg0 context.Context, arg1 *db.GitopsEngineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitopsEngineInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGitopsEngineInstance indicates an expected call of CreateGitopsEngineInstance.
func (mr *MockDatabaseQueriesMockRecorder) CreateGitopsEngineInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitopsEngineInstance", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateGitopsEngineInstance), arg0, arg1)
}

// CreateKubernetesResourceToDBResourceMapping mocks base method.
func (m *MockDatabaseQueries) CreateKubernetesResourceToDBResourceMapping(arg0 context.Context, arg1 *db.KubernetesToDBResourceMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKubernetesResourceToDBResourceMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKubernetesResourceToDBResourceMapping indicates an expected call of CreateKubernetesResourceToDBResourceMapping.
func (mr *MockDatabaseQueriesMockRecorder) CreateKubernetesResourceToDBResourceMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesResourceToDBResourceMapping", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateKubernetesResourceToDBResourceMapping), arg0, arg1)
}

// CreateManagedEnvironment mocks base method.
func (m *MockDatabaseQueries) CreateManagedEnvironment(arg0 context.Context, arg1 *db.ManagedEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManagedEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateManagedEnvironment indicates an expected call of CreateManagedEnvironment.
func (mr *MockDatabaseQueriesMockRecorder) CreateManagedEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManagedEnvironment", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateManagedEnvironment), arg0, arg1)
}

// CreateOperation mocks base method.
func (m *MockDatabaseQueries) CreateOperation(arg0 context.Context, arg1 *db.Operation, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOperation indicates an expected call of CreateOperation.
func (mr *MockDatabaseQueriesMockRecorder) CreateOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperation", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateOperation), arg0, arg1, arg2)
}

// CreateRepositoryCredentials mocks base method.
func (m *MockDatabaseQueries) CreateRepositoryCredentials(arg0 context.Context, arg1 *db.RepositoryCredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryCredentials", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepositoryCredentials indicates an expected call of CreateRepositoryCredentials.
func (mr *MockDatabaseQueriesMockRecorder) CreateRepositoryCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryCredentials", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateRepositoryCredentials), arg0, arg1)
}

// CreateSyncOperation mocks base method.
func (m *MockDatabaseQueries) CreateSyncOperation(arg0 context.Context, arg1 *db.SyncOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncOperation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSyncOperation indicates an expected call of CreateSyncOperation.
func (mr *MockDatabaseQueriesMockRecorder) CreateSyncOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncOperation", reflect.TypeOf((*MockDatabaseQueries)(nil).CreateSyncOperation), arg0, arg1)
}

// DeleteAPICRToDatabaseMapping mocks base method.
func (m *MockDatabaseQueries) DeleteAPICRToDatabaseMapping(arg0 context.Context, arg1 *db.APICRToDatabaseMapping) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPICRToDatabaseMapping", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPICRToDatabaseMapping indicates an expected call of DeleteAPICRToDatabaseMapping.
func (mr *MockDatabaseQueriesMockRecorder) DeleteAPICRToDatabaseMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPICRToDatabaseMapping", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteAPICRToDatabaseMapping), arg0, arg1)
}

// DeleteAppProjectManagedEnvironmentByManagedEnvId mocks base method.
func (m *MockDatabaseQueries) DeleteAppProjectManagedEnvironmentByManagedEnvId(arg0 context.Context, arg1 *db.AppProjectManagedEnvironment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppProjectManagedEnvironmentByManagedEnvId", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppProjectManagedEnvironmentByManagedEnvId indicates an expected call of DeleteAppProjectManagedEnvironmentByManagedEnvId.
func (mr *MockDatabaseQueriesMockRecorder) DeleteAppProjectManagedEnvironmentByManagedEnvId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppProjectManagedEnvironmentByManagedEnvId", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteAppProjectManagedEnvironmentByManagedEnvId), arg0, arg1)
}

// DeleteAppProjectRepositoryByClusterUserAndRepoURL mocks base method.
func (m *MockDatabaseQueries) DeleteAppProjectRepositoryByClusterUserAndRepoURL(arg0 context.Context, arg1 *db.AppProjectRepository) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppProjectRepositoryByClusterUserAndRepoURL", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppProjectRepositoryByClusterUserAndRepoURL indicates an expected call of DeleteAppProjectRepositoryByClusterUserAndRepoURL.
func (mr *MockDatabaseQueriesMockRecorder) DeleteAppProjectRepositoryByClusterUserAndRepoURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppProjectRepositoryByClusterUserAndRepoURL", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteAppProjectRepositoryByClusterUserAndRepoURL), arg0, arg1)
}

// DeleteAppProjectRepositoryByRepoCredId mocks base method.
func (m *MockDatabaseQueries) DeleteAppProjectRepositoryByRepoCredId(arg0 context.Context, arg1 *db.AppProjectRepository) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppProjectRepositoryByRepoCredId", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppProjectRepositoryByRepoCredId indicates an expected call of DeleteAppProjectRepositoryByRepoCredId.
func (mr *MockDatabaseQueriesMockRecorder) DeleteAppProjectRepositoryByRepoCredId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppProjectRepositoryByRepoCredId", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteAppProjectRepositoryByRepoCredId), arg0, arg1)
}

// DeleteApplicationById mocks base method.
func (m *MockDatabaseQueries) DeleteApplicationById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationById indicates an expected call of DeleteApplicationById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteApplicationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteApplicationById), arg0, arg1)
}

// DeleteApplicationOwner mocks base method.
func (m *MockDatabaseQueries) DeleteApplicationOwner(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationOwner", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationOwner indicates an expected call of DeleteApplicationOwner.
func (mr *MockDatabaseQueriesMockRecorder) DeleteApplicationOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationOwner", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteApplicationOwner), arg0, arg1)
}

// DeleteApplicationStateById mocks base method.
func (m *MockDatabaseQueries) DeleteApplicationStateById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationStateById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationStateById indicates an expected call of DeleteApplicationStateById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteApplicationStateById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationStateById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteApplicationStateById), arg0, arg1)
}

// DeleteClusterAccessById mocks base method.
func (m *MockDatabaseQueries) DeleteClusterAccessById(arg0 context.Context, arg1, arg2, arg3 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterAccessById", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterAccessById indicates an expected call of DeleteClusterAccessById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteClusterAccessById(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterAccessById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteClusterAccessById), arg0, arg1, arg2, arg3)
}

// DeleteClusterCredentialsById mocks base method.
func (m *MockDatabaseQueries) DeleteClusterCredentialsById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterCredentialsById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterCredentialsById indicates an expected call of DeleteClusterCredentialsById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteClusterCredentialsById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterCredentialsById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteClusterCredentialsById), arg0, arg1)
}

// DeleteClusterUserById mocks base method.
func (m *MockDatabaseQueries) DeleteClusterUserById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterUserById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterUserById indicates an expected call of DeleteClusterUserById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteClusterUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterUserById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteClusterUserById), arg0, arg1)
}

// DeleteDeploymentToApplicationMappingByDeplId mocks base method.
func (m *MockDatabaseQueries) DeleteDeploymentToApplicationMappingByDeplId(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentToApplicationMappingByDeplId", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentToApplicationMappingByDeplId indicates an expected call of DeleteDeploymentToApplicationMappingByDeplId.
func (mr *MockDatabaseQueriesMockRecorder) DeleteDeploymentToApplicationMappingByDeplId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentToApplicationMappingByDeplId", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteDeploymentToApplicationMappingByDeplId), arg0, arg1)
}

// DeleteDeploymentToApplicationMappingByNamespaceAndName mocks base method.
func (m *MockDatabaseQueries) DeleteDeploymentToApplicationMappingByNamespaceAndName(arg0 context.Context, arg1, arg2, arg3 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentToApplicationMappingByNamespaceAndName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentToApplicationMappingByNamespaceAndName indicates an expected call of DeleteDeploymentToApplicationMappingByNamespaceAndName.
func (mr *MockDatabaseQueriesMockRecorder) DeleteDeploymentToApplicationMappingByNamespaceAndName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentToApplicationMappingByNamespaceAndName", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteDeploymentToApplicationMappingByNamespaceAndName), arg0, arg1, arg2, arg3)
}

// DeleteGitopsEngineClusterById mocks base method.
func (m *MockDatabaseQueries) DeleteGitopsEngineClusterById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitopsEngineClusterById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGitopsEngineClusterById indicates an expected call of DeleteGitopsEngineClusterById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteGitopsEngineClusterById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitopsEngineClusterById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteGitopsEngineClusterById), arg0, arg1)
}

// DeleteGitopsEngineInstanceById mocks base method.
func (m *MockDatabaseQueries) DeleteGitopsEngineInstanceById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitopsEngineInstanceById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGitopsEngineInstanceById indicates an expected call of DeleteGitopsEngineInstanceById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteGitopsEngineInstanceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitopsEngineInstanceById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteGitopsEngineInstanceById), arg0, arg1)
}

// DeleteKubernetesResourceToDBResourceMapping mocks base method.
func (m *MockDatabaseQueries) DeleteKubernetesResourceToDBResourceMapping(arg0 context.Context, arg1 *db.KubernetesToDBResourceMapping) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKubernetesResourceToDBResourceMapping", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKubernetesResourceToDBResourceMapping indicates an expected call of DeleteKubernetesResourceToDBResourceMapping.
func (mr *MockDatabaseQueriesMockRecorder) DeleteKubernetesResourceToDBResourceMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKubernetesResourceToDBResourceMapping", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteKubernetesResourceToDBResourceMapping), arg0, arg1)
}

// DeleteManagedEnvironmentById mocks base method.
func (m *MockDatabaseQueries) DeleteManagedEnvironmentById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManagedEnvironmentById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteManagedEnvironmentById indicates an expected call of DeleteManagedEnvironmentById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteManagedEnvironmentById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManagedEnvironmentById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteManagedEnvironmentById), arg0, arg1)
}

// DeleteOperationById mocks base method.
func (m *MockDatabaseQueries) DeleteOperationById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperationById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOperationById indicates an expected call of DeleteOperationById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteOperationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperationById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteOperationById), arg0, arg1)
}

// DeleteRepositoryCredentialsByID mocks base method.
func (m *MockDatabaseQueries) DeleteRepositoryCredentialsByID(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryCredentialsByID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryCredentialsByID indicates an expected call of DeleteRepositoryCredentialsByID.
func (mr *MockDatabaseQueriesMockRecorder) DeleteRepositoryCredentialsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryCredentialsByID", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteRepositoryCredentialsByID), arg0, arg1)
}

// DeleteSyncOperationById mocks base method.
func (m *MockDatabaseQueries) DeleteSyncOperationById(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSyncOperationById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSyncOperationById indicates an expected call of DeleteSyncOperationById.
func (mr *MockDatabaseQueriesMockRecorder) DeleteSyncOperationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncOperationById", reflect.TypeOf((*MockDatabaseQueries)(nil).DeleteSyncOperationById), arg0, arg1)
}

// GetAPICRForDatabaseUID mocks base method.
func (m *MockDatabaseQueries) GetAPICRForDatabaseUID(arg0 context.Context, arg1 *db.APICRToDatabaseMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPICRForDatabaseUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAPICRForDatabaseUID indicates an expected call of GetAPICRForDatabaseUID.
func (mr *MockDatabaseQueriesMockRecorder) GetAPICRForDatabaseUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPICRForDatabaseUID", reflect.TypeOf((*MockDatabaseQueries)(nil).GetAPICRForDatabaseUID), arg0, arg1)
}

// GetAPICRToDatabaseMappingBatch mocks base method.
func (m *MockDatabaseQueries) GetAPICRToDatabaseMappingBatch(arg0 context.Context, arg1 *[]db.APICRToDatabaseMapping, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPICRToDatabaseMappingBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAPICRToDatabaseMappingBatch indicates an expected call of GetAPICRToDatabaseMappingBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetAPICRToDatabaseMappingBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPICRToDatabaseMappingBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetAPICRToDatabaseMappingBatch), arg0, arg1, arg2, arg3)
}

// GetAppProjectManagedEnvironmentByManagedEnvId mocks base method.
func (m *MockDatabaseQueries) GetAppProjectManagedEnvironmentByManagedEnvId(arg0 context.Context, arg1 *db.AppProjectManagedEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppProjectManagedEnvironmentByManagedEnvId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppProjectManagedEnvironmentByManagedEnvId indicates an expected call of GetAppProjectManagedEnvironmentByManagedEnvId.
func (mr *MockDatabaseQueriesMockRecorder) GetAppProjectManagedEnvironmentByManagedEnvId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppProjectManagedEnvironmentByManagedEnvId", reflect.TypeOf((*MockDatabaseQueries)(nil).GetAppProjectManagedEnvironmentByManagedEnvId), arg0, arg1)
}

// GetAppProjectRepositoryByClusterUserAndRepoURL mocks base method.
func (m *MockDatabaseQueries) GetAppProjectRepositoryByClusterUserAndRepoURL(arg0 context.Context, arg1 *db.AppProjectRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppProjectRepositoryByClusterUserAndRepoURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppProjectRepositoryByClusterUserAndRepoURL indicates an expected call of GetAppProjectRepositoryByClusterUserAndRepoURL.
func (mr *MockDatabaseQueriesMockRecorder) GetAppProjectRepositoryByClusterUserAndRepoURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppProjectRepositoryByClusterUserAndRepoURL", reflect.TypeOf((*MockDatabaseQueries)(nil).GetAppProjectRepositoryByClusterUserAndRepoURL), arg0, arg1)
}

// GetApplicationBatch mocks base method.
func (m *MockDatabaseQueries) GetApplicationBatch(arg0 context.Context, arg1 *[]db.Application, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationBatch indicates an expected call of GetApplicationBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetApplicationBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetApplicationBatch), arg0, arg1, arg2, arg3)
}

// GetApplicationById mocks base method.
func (m *MockDatabaseQueries) GetApplicationById(arg0 context.Context, arg1 *db.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationById indicates an expected call of GetApplicationById.
func (mr *MockDatabaseQueriesMockRecorder) GetApplicationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetApplicationById), arg0, arg1)
}

// GetApplicationOwnerByApplicationID mocks base method.
func (m *MockDatabaseQueries) GetApplicationOwnerByApplicationID(arg0 context.Context, arg1 *db.ApplicationOwner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationOwnerByApplicationID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationOwnerByApplicationID indicates an expected call of GetApplicationOwnerByApplicationID.
func (mr *MockDatabaseQueriesMockRecorder) GetApplicationOwnerByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationOwnerByApplicationID", reflect.TypeOf((*MockDatabaseQueries)(nil).GetApplicationOwnerByApplicationID), arg0, arg1)
}

// GetApplicationStateById mocks base method.
func (m *MockDatabaseQueries) GetApplicationStateById(arg0 context.Context, arg1 *db.ApplicationState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStateById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationStateById indicates an expected call of GetApplicationStateById.
func (mr *MockDatabaseQueriesMockRecorder) GetApplicationStateById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStateById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetApplicationStateById), arg0, arg1)
}

// GetClusterAccessBatch mocks base method.
func (m *MockDatabaseQueries) GetClusterAccessBatch(arg0 context.Context, arg1 *[]db.ClusterAccess, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterAccessBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterAccessBatch indicates an expected call of GetClusterAccessBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetClusterAccessBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterAccessBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetClusterAccessBatch), arg0, arg1, arg2, arg3)
}

// GetClusterAccessByPrimaryKey mocks base method.
func (m *MockDatabaseQueries) GetClusterAccessByPrimaryKey(arg0 context.Context, arg1 *db.ClusterAccess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterAccessByPrimaryKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterAccessByPrimaryKey indicates an expected call of GetClusterAccessByPrimaryKey.
func (mr *MockDatabaseQueriesMockRecorder) GetClusterAccessByPrimaryKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterAccessByPrimaryKey", reflect.TypeOf((*MockDatabaseQueries)(nil).GetClusterAccessByPrimaryKey), arg0, arg1)
}

// GetClusterCredentialsBatch mocks base method.
func (m *MockDatabaseQueries) GetClusterCredentialsBatch(arg0 context.Context, arg1 *[]db.ClusterCredentials, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterCredentialsBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterCredentialsBatch indicates an expected call of GetClusterCredentialsBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetClusterCredentialsBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCredentialsBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetClusterCredentialsBatch), arg0, arg1, arg2, arg3)
}

// GetClusterCredentialsById mocks base method.
func (m *MockDatabaseQueries) GetClusterCredentialsById(arg0 context.Context, arg1 *db.ClusterCredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterCredentialsById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterCredentialsById indicates an expected call of GetClusterCredentialsById.
func (mr *MockDatabaseQueriesMockRecorder) GetClusterCredentialsById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCredentialsById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetClusterCredentialsById), arg0, arg1)
}

// GetClusterUserBatch mocks base method.
func (m *MockDatabaseQueries) GetClusterUserBatch(arg0 context.Context, arg1 *[]db.ClusterUser, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterUserBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterUserBatch indicates an expected call of GetClusterUserBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetClusterUserBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterUserBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetClusterUserBatch), arg0, arg1, arg2, arg3)
}

// GetClusterUserById mocks base method.
func (m *MockDatabaseQueries) GetClusterUserById(arg0 context.Context, arg1 *db.ClusterUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterUserById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterUserById indicates an expected call of GetClusterUserById.
func (mr *MockDatabaseQueriesMockRecorder) GetClusterUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterUserById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetClusterUserById), arg0, arg1)
}

// GetClusterUserByUsername mocks base method.
func (m *MockDatabaseQueries) GetClusterUserByUsername(arg0 context.Context, arg1 *db.ClusterUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterUserByUsername indicates an expected call of GetClusterUserByUsername.
func (mr *MockDatabaseQueriesMockRecorder) GetClusterUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterUserByUsername", reflect.TypeOf((*MockDatabaseQueries)(nil).GetClusterUserByUsername), arg0, arg1)
}

// GetDBResourceMappingForKubernetesResource mocks base method.
func (m *MockDatabaseQueries) GetDBResourceMappingForKubernetesResource(arg0 context.Context, arg1 *db.KubernetesToDBResourceMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBResourceMappingForKubernetesResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDBResourceMappingForKubernetesResource indicates an expected call of GetDBResourceMappingForKubernetesResource.
func (mr *MockDatabaseQueriesMockRecorder) GetDBResourceMappingForKubernetesResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBResourceMappingForKubernetesResource", reflect.TypeOf((*MockDatabaseQueries)(nil).GetDBResourceMappingForKubernetesResource), arg0, arg1)
}

// GetDatabaseMappingForAPICR mocks base method.
func (m *MockDatabaseQueries) GetDatabaseMappingForAPICR(arg0 context.Context, arg1 *db.APICRToDatabaseMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseMappingForAPICR", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDatabaseMappingForAPICR indicates an expected call of GetDatabaseMappingForAPICR.
func (mr *MockDatabaseQueriesMockRecorder) GetDatabaseMappingForAPICR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseMappingForAPICR", reflect.TypeOf((*MockDatabaseQueries)(nil).GetDatabaseMappingForAPICR), arg0, arg1)
}

// GetDeploymentToApplicationMappingBatch mocks base method.
func (m *MockDatabaseQueries) GetDeploymentToApplicationMappingBatch(arg0 context.Context, arg1 *[]db.DeploymentToApplicationMapping, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentToApplicationMappingBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeploymentToApplicationMappingBatch indicates an expected call of GetDeploymentToApplicationMappingBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetDeploymentToApplicationMappingBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentToApplicationMappingBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetDeploymentToApplicationMappingBatch), arg0, arg1, arg2, arg3)
}

// GetDeploymentToApplicationMappingByApplicationId mocks base method.
func (m *MockDatabaseQueries) GetDeploymentToApplicationMappingByApplicationId(arg0 context.Context, arg1 *db.DeploymentToApplicationMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentToApplicationMappingByApplicationId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeploymentToApplicationMappingByApplicationId indicates an expected call of GetDeploymentToApplicationMappingByApplicationId.
func (mr *MockDatabaseQueriesMockRecorder) GetDeploymentToApplicationMappingByApplicationId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentToApplicationMappingByApplicationId", reflect.TypeOf((*MockDatabaseQueries)(nil).GetDeploymentToApplicationMappingByApplicationId), arg0, arg1)
}

// GetDeploymentToApplicationMappingByDeplId mocks base method.
func (m *MockDatabaseQueries) GetDeploymentToApplicationMappingByDeplId(arg0 context.Context, arg1 *db.DeploymentToApplicationMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentToApplicationMappingByDeplId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeploymentToApplicationMappingByDeplId indicates an expected call of GetDeploymentToApplicationMappingByDeplId.
func (mr *MockDatabaseQueriesMockRecorder) GetDeploymentToApplicationMappingByDeplId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentToApplicationMappingByDeplId", reflect.TypeOf((*MockDatabaseQueries)(nil).GetDeploymentToApplicationMappingByDeplId), arg0, arg1)
}

// GetGitopsEngineClusterBatch mocks base method.
func (m *MockDatabaseQueries) GetGitopsEngineClusterBatch(arg0 context.Context, arg1 *[]db.GitopsEngineCluster, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitopsEngineClusterBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGitopsEngineClusterBatch indicates an expected call of GetGitopsEngineClusterBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetGitopsEngineClusterBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitopsEngineClusterBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetGitopsEngineClusterBatch), arg0, arg1, arg2, arg3)
}

// GetGitopsEngineClusterById mocks base method.
func (m *MockDatabaseQueries) GetGitopsEngineClusterById(arg0 context.Context, arg1 *db.GitopsEngineCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitopsEngineClusterById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGitopsEngineClusterById indicates an expected call of GetGitopsEngineClusterById.
func (mr *MockDatabaseQueriesMockRecorder) GetGitopsEngineClusterById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitopsEngineClusterById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetGitopsEngineClusterById), arg0, arg1)
}

// GetGitopsEngineInstanceById mocks base method.
func (m *MockDatabaseQueries) GetGitopsEngineInstanceById(arg0 context.Context, arg1 *db.GitopsEngineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitopsEngineInstanceById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGitopsEngineInstanceById indicates an expected call of GetGitopsEngineInstanceById.
func (mr *MockDatabaseQueriesMockRecorder) GetGitopsEngineInstanceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitopsEngineInstanceById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetGitopsEngineInstanceById), arg0, arg1)
}

// GetKubernetesResourceMappingForDatabaseResource mocks base method.
func (m *MockDatabaseQueries) GetKubernetesResourceMappingForDatabaseResource(arg0 context.Context, arg1 *db.KubernetesToDBResourceMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesResourceMappingForDatabaseResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetKubernetesResourceMappingForDatabaseResource indicates an expected call of GetKubernetesResourceMappingForDatabaseResource.
func (mr *MockDatabaseQueriesMockRecorder) GetKubernetesResourceMappingForDatabaseResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesResourceMappingForDatabaseResource", reflect.TypeOf((*MockDatabaseQueries)(nil).GetKubernetesResourceMappingForDatabaseResource), arg0, arg1)
}

// GetKubernetesToDBResourceMappingBatch mocks base method.
func (m *MockDatabaseQueries) GetKubernetesToDBResourceMappingBatch(arg0 context.Context, arg1 *[]db.KubernetesToDBResourceMapping, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesToDBResourceMappingBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetKubernetesToDBResourceMappingBatch indicates an expected call of GetKubernetesToDBResourceMappingBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetKubernetesToDBResourceMappingBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesToDBResourceMappingBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetKubernetesToDBResourceMappingBatch), arg0, arg1, arg2, arg3)
}

// GetManagedEnvironmentBatch mocks base method.
func (m *MockDatabaseQueries) GetManagedEnvironmentBatch(arg0 context.Context, arg1 *[]db.ManagedEnvironment, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedEnvironmentBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetManagedEnvironmentBatch indicates an expected call of GetManagedEnvironmentBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetManagedEnvironmentBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedEnvironmentBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetManagedEnvironmentBatch), arg0, arg1, arg2, arg3)
}

// GetManagedEnvironmentById mocks base method.
func (m *MockDatabaseQueries) GetManagedEnvironmentById(arg0 context.Context, arg1 *db.ManagedEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedEnvironmentById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetManagedEnvironmentById indicates an expected call of GetManagedEnvironmentById.
func (mr *MockDatabaseQueriesMockRecorder) GetManagedEnvironmentById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedEnvironmentById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetManagedEnvironmentById), arg0, arg1)
}

// GetOperationBatch mocks base method.
func (m *MockDatabaseQueries) GetOperationBatch(arg0 context.Context, arg1 *[]db.Operation, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOperationBatch indicates an expected call of GetOperationBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetOperationBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetOperationBatch), arg0, arg1, arg2, arg3)
}

// GetOperationById mocks base method.
func (m *MockDatabaseQueries) GetOperationById(arg0 context.Context, arg1 *db.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOperationById indicates an expected call of GetOperationById.
func (mr *MockDatabaseQueriesMockRecorder) GetOperationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetOperationById), arg0, arg1)
}

// GetOrCreateSpecialClusterUser mocks base method.
func (m *MockDatabaseQueries) GetOrCreateSpecialClusterUser(arg0 context.Context, arg1 *db.ClusterUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateSpecialClusterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateSpecialClusterUser indicates an expected call of GetOrCreateSpecialClusterUser.
func (mr *MockDatabaseQueriesMockRecorder) GetOrCreateSpecialClusterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSpecialClusterUser", reflect.TypeOf((*MockDatabaseQueries)(nil).GetOrCreateSpecialClusterUser), arg0, arg1)
}

// GetRepositoryCredentialsBatch mocks base method.
func (m *MockDatabaseQueries) GetRepositoryCredentialsBatch(arg0 context.Context, arg1 *[]db.RepositoryCredentials, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryCredentialsBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRepositoryCredentialsBatch indicates an expected call of GetRepositoryCredentialsBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetRepositoryCredentialsBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryCredentialsBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetRepositoryCredentialsBatch), arg0, arg1, arg2, arg3)
}

// GetRepositoryCredentialsByID mocks base method.
func (m *MockDatabaseQueries) GetRepositoryCredentialsByID(arg0 context.Context, arg1 string) (db.RepositoryCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryCredentialsByID", arg0, arg1)
	ret0, _ := ret[0].(db.RepositoryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryCredentialsByID indicates an expected call of GetRepositoryCredentialsByID.
func (mr *MockDatabaseQueriesMockRecorder) GetRepositoryCredentialsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryCredentialsByID", reflect.TypeOf((*MockDatabaseQueries)(nil).GetRepositoryCredentialsByID), arg0, arg1)
}

// GetSyncOperationById mocks base method.
func (m *MockDatabaseQueries) GetSyncOperationById(arg0 context.Context, arg1 *db.SyncOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncOperationById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSyncOperationById indicates an expected call of GetSyncOperationById.
func (mr *MockDatabaseQueriesMockRecorder) GetSyncOperationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncOperationById", reflect.TypeOf((*MockDatabaseQueries)(nil).GetSyncOperationById), arg0, arg1)
}

// GetSyncOperationsBatch mocks base method.
func (m *MockDatabaseQueries) GetSyncOperationsBatch(arg0 context.Context, arg1 *[]db.SyncOperation, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncOperationsBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSyncOperationsBatch indicates an expected call of GetSyncOperationsBatch.
func (mr *MockDatabaseQueriesMockRecorder) GetSyncOperationsBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncOperationsBatch", reflect.TypeOf((*MockDatabaseQueries)(nil).GetSyncOperationsBatch), arg0, arg1, arg2, arg3)
}

// ListAPICRToDatabaseMappingByAPINamespaceAndName mocks base method.
func (m *MockDatabaseQueries) ListAPICRToDatabaseMappingByAPINamespaceAndName(arg0 context.Context, arg1 db.APICRToDatabaseMapping_ResourceType, arg2, arg3, arg4 string, arg5 db.APICRToDatabaseMapping_DBRelationType, arg6 *[]db.APICRToDatabaseMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPICRToDatabaseMappingByAPINamespaceAndName", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAPICRToDatabaseMappingByAPINamespaceAndName indicates an expected call of ListAPICRToDatabaseMappingByAPINamespaceAndName.
func (mr *MockDatabaseQueriesMockRecorder) ListAPICRToDatabaseMappingByAPINamespaceAndName(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPICRToDatabaseMappingByAPINamespaceAndName", reflect.TypeOf((*MockDatabaseQueries)(nil).ListAPICRToDatabaseMappingByAPINamespaceAndName), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ListAppProjectManagedEnvironmentByClusterUserId mocks base method.
func (m *MockDatabaseQueries) ListAppProjectManagedEnvironmentByClusterUserId(arg0 context.Context, arg1 string, arg2 *[]db.AppProjectManagedEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppProjectManagedEnvironmentByClusterUserId", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppProjectManagedEnvironmentByClusterUserId indicates an expected call of ListAppProjectManagedEnvironmentByClusterUserId.
func (mr *MockDatabaseQueriesMockRecorder) ListAppProjectManagedEnvironmentByClusterUserId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppProjectManagedEnvironmentByClusterUserId", reflect.TypeOf((*MockDatabaseQueries)(nil).ListAppProjectManagedEnvironmentByClusterUserId), arg0, arg1, arg2)
}

// ListAppProjectRepositoryByClusterUserId mocks base method.
func (m *MockDatabaseQueries) ListAppProjectRepositoryByClusterUserId(arg0 context.Context, arg1 string, arg2 *[]db.AppProjectRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppProjectRepositoryByClusterUserId", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppProjectRepositoryByClusterUserId indicates an expected call of ListAppProjectRepositoryByClusterUserId.
func (mr *MockDatabaseQueriesMockRecorder) ListAppProjectRepositoryByClusterUserId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppProjectRepositoryByClusterUserId", reflect.TypeOf((*MockDatabaseQueries)(nil).ListAppProjectRepositoryByClusterUserId), arg0, arg1, arg2)
}

// ListApplicationsForManagedEnvironment mocks base method.
func (m *MockDatabaseQueries) ListApplicationsForManagedEnvironment(arg0 context.Context, arg1 string, arg2 *[]db.Application) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsForManagedEnvironment", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsForManagedEnvironment indicates an expected call of ListApplicationsForManagedEnvironment.
func (mr *MockDatabaseQueriesMockRecorder) ListApplicationsForManagedEnvironment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsForManagedEnvironment", reflect.TypeOf((*MockDatabaseQueries)(nil).ListApplicationsForManagedEnvironment), arg0, arg1, arg2)
}

// ListClusterAccessesByManagedEnvironmentID mocks base method.
func (m *MockDatabaseQueries) ListClusterAccessesByManagedEnvironmentID(arg0 context.Context, arg1 string, arg2 *[]db.ClusterAccess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterAccessesByManagedEnvironmentID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClusterAccessesByManagedEnvironmentID indicates an expected call of ListClusterAccessesByManagedEnvironmentID.
func (mr *MockDatabaseQueriesMockRecorder) ListClusterAccessesByManagedEnvironmentID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterAccessesByManagedEnvironmentID", reflect.TypeOf((*MockDatabaseQueries)(nil).ListClusterAccessesByManagedEnvironmentID), arg0, arg1, arg2)
}

// ListDeploymentToApplicationMappingByNamespaceAndName mocks base method.
func (m *MockDatabaseQueries) ListDeploymentToApplicationMappingByNamespaceAndName(arg0 context.Context, arg1, arg2, arg3 string, arg4 *[]db.DeploymentToApplicationMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentToApplicationMappingByNamespaceAndName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentToApplicationMappingByNamespaceAndName indicates an expected call of ListDeploymentToApplicationMappingByNamespaceAndName.
func (mr *MockDatabaseQueriesMockRecorder) ListDeploymentToApplicationMappingByNamespaceAndName(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentToApplicationMappingByNamespaceAndName", reflect.TypeOf((*MockDatabaseQueries)(nil).ListDeploymentToApplicationMappingByNamespaceAndName), arg0, arg1, arg2, arg3, arg4)
}

// ListDeploymentToApplicationMappingByNamespaceUID mocks base method.
func (m *MockDatabaseQueries) ListDeploymentToApplicationMappingByNamespaceUID(arg0 context.Context, arg1 string, arg2 *[]db.DeploymentToApplicationMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentToApplicationMappingByNamespaceUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentToApplicationMappingByNamespaceUID indicates an expected call of ListDeploymentToApplicationMappingByNamespaceUID.
func (mr *MockDatabaseQueriesMockRecorder) ListDeploymentToApplicationMappingByNamespaceUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentToApplicationMappingByNamespaceUID", reflect.TypeOf((*MockDatabaseQueries)(nil).ListDeploymentToApplicationMappingByNamespaceUID), arg0, arg1, arg2)
}

// ListGitopsEngineInstancesForCluster mocks base method.
func (m *MockDatabaseQueries) ListGitopsEngineInstancesForCluster(arg0 context.Context, arg1 db.GitopsEngineCluster, arg2 *[]db.GitopsEngineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitopsEngineInstancesForCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGitopsEngineInstancesForCluster indicates an expected call of ListGitopsEngineInstancesForCluster.
func (mr *MockDatabaseQueriesMockRecorder) ListGitopsEngineInstancesForCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitopsEngineInstancesForCluster", reflect.TypeOf((*MockDatabaseQueries)(nil).ListGitopsEngineInstancesForCluster), arg0, arg1, arg2)
}

// ListManagedEnvironmentForClusterCredentialsAndOwnerId mocks base method.
func (m *MockDatabaseQueries) ListManagedEnvironmentForClusterCredentialsAndOwnerId(arg0 context.Context, arg1, arg2 string, arg3 *[]db.ManagedEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedEnvironmentForClusterCredentialsAndOwnerId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListManagedEnvironmentForClusterCredentialsAndOwnerId indicates an expected call of ListManagedEnvironmentForClusterCredentialsAndOwnerId.
func (mr *MockDatabaseQueriesMockRecorder) ListManagedEnvironmentForClusterCredentialsAndOwnerId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedEnvironmentForClusterCredentialsAndOwnerId", reflect.TypeOf((*MockDatabaseQueries)(nil).ListManagedEnvironmentForClusterCredentialsAndOwnerId), arg0, arg1, arg2, arg3)
}

// ListOperationsByResourceIdAndTypeAndOwnerId mocks base method.
func (m *MockDatabaseQueries) ListOperationsByResourceIdAndTypeAndOwnerId(arg0 context.Context, arg1 string, arg2 db.OperationResourceType, arg3 *[]db.Operation, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperationsByResourceIdAndTypeAndOwnerId", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOperationsByResourceIdAndTypeAndOwnerId indicates an expected call of ListOperationsByResourceIdAndTypeAndOwnerId.
func (mr *MockDatabaseQueriesMockRecorder) ListOperationsByResourceIdAndTypeAndOwnerId(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsByResourceIdAndTypeAndOwnerId", reflect.TypeOf((*MockDatabaseQueries)(nil).ListOperationsByResourceIdAndTypeAndOwnerId), arg0, arg1, arg2, arg3, arg4)
}

// ListOperationsToBeGarbageCollected mocks base method.
func (m *MockDatabaseQueries) ListOperationsToBeGarbageCollected(arg0 context.Context, arg1 *[]db.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperationsToBeGarbageCollected", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOperationsToBeGarbageCollected indicates an expected call of ListOperationsToBeGarbageCollected.
func (mr *MockDatabaseQueriesMockRecorder) ListOperationsToBeGarbageCollected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsToBeGarbageCollected", reflect.TypeOf((*MockDatabaseQueries)(nil).ListOperationsToBeGarbageCollected), arg0, arg1)
}

// RemoveManagedEnvironmentFromAllApplications mocks base method.
func (m *MockDatabaseQueries) RemoveManagedEnvironmentFromAllApplications(arg0 context.Context, arg1 string, arg2 *[]db.Application) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveManagedEnvironmentFromAllApplications", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveManagedEnvironmentFromAllApplications indicates an expected call of RemoveManagedEnvironmentFromAllApplications.
func (mr *MockDatabaseQueriesMockRecorder) RemoveManagedEnvironmentFromAllApplications(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveManagedEnvironmentFromAllApplications", reflect.TypeOf((*MockDatabaseQueries)(nil).RemoveManagedEnvironmentFromAllApplications), arg0, arg1, arg2)
}

// UpdateAppProjectRepository mocks base method.
func (m *MockDatabaseQueries) UpdateAppProjectRepository(arg0 context.Context, arg1 *db.AppProjectRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppProjectRepository", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppProjectRepository indicates an expected call of UpdateAppProjectRepository.
func (mr *MockDatabaseQueriesMockRecorder) UpdateAppProjectRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppProjectRepository", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateAppProjectRepository), arg0, arg1)
}

// UpdateApplication mocks base method.
func (m *MockDatabaseQueries) UpdateApplication(arg0 context.Context, arg1 *db.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockDatabaseQueriesMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateApplication), arg0, arg1)
}

// UpdateApplicationState mocks base method.
func (m *MockDatabaseQueries) UpdateApplicationState(arg0 context.Context, arg1 *db.ApplicationState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicationState indicates an expected call of UpdateApplicationState.
func (mr *MockDatabaseQueriesMockRecorder) UpdateApplicationState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationState", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateApplicationState), arg0, arg1)
}

// UpdateClusterUser mocks base method.
func (m *MockDatabaseQueries) UpdateClusterUser(arg0 context.Context, arg1 *db.ClusterUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterUser indicates an expected call of UpdateClusterUser.
func (mr *MockDatabaseQueriesMockRecorder) UpdateClusterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterUser", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateClusterUser), arg0, arg1)
}

// UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping mocks base method.
func (m *MockDatabaseQueries) UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping(arg0 context.Context, arg1 *db.KubernetesToDBResourceMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping indicates an expected call of UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping.
func (mr *MockDatabaseQueriesMockRecorder) UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateKubernetesResourceUIDForKubernetesToDBResourceMapping), arg0, arg1)
}

// UpdateManagedEnvironment mocks base method.
func (m *MockDatabaseQueries) UpdateManagedEnvironment(arg0 context.Context, arg1 *db.ManagedEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManagedEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManagedEnvironment indicates an expected call of UpdateManagedEnvironment.
func (mr *MockDatabaseQueriesMockRecorder) UpdateManagedEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManagedEnvironment", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateManagedEnvironment), arg0, arg1)
}

// UpdateOperation mocks base method.
func (m *MockDatabaseQueries) UpdateOperation(arg0 context.Context, arg1 *db.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperation indicates an expected call of UpdateOperation.
func (mr *MockDatabaseQueriesMockRecorder) UpdateOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperation", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateOperation), arg0, arg1)
}

// UpdateRepositoryCredentials mocks base method.
func (m *MockDatabaseQueries) UpdateRepositoryCredentials(arg0 context.Context, arg1 *db.RepositoryCredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryCredentials", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepositoryCredentials indicates an expected call of UpdateRepositoryCredentials.
func (mr *MockDatabaseQueriesMockRecorder) UpdateRepositoryCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryCredentials", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateRepositoryCredentials), arg0, arg1)
}

// UpdateSyncOperation mocks base method.
func (m *MockDatabaseQueries) UpdateSyncOperation(arg0 context.Context, arg1 *db.SyncOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncOperation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSyncOperation indicates an expected call of UpdateSyncOperation.
func (mr *MockDatabaseQueriesMockRecorder) UpdateSyncOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncOperation", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateSyncOperation), arg0, arg1)
}

// UpdateSyncOperationRemoveApplicationField mocks base method.
func (m *MockDatabaseQueries) UpdateSyncOperationRemoveApplicationField(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncOperationRemoveApplicationField", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncOperationRemoveApplicationField indicates an expected call of UpdateSyncOperationRemoveApplicationField.
func (mr *MockDatabaseQueriesMockRecorder) UpdateSyncOperationRemoveApplicationField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncOperationRemoveApplicationField", reflect.TypeOf((*MockDatabaseQueries)(nil).UpdateSyncOperationRemoveApplicationField), arg0, arg1)
}
