// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redhat-appstudio/managed-gitops/backend-shared/db (interfaces: DisposableResource)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/redhat-appstudio/managed-gitops/backend-shared/db"
)

// MockDisposableResource is a mock of DisposableResource interface.
type MockDisposableResource struct {
	ctrl     *gomock.Controller
	recorder *MockDisposableResourceMockRecorder
}

// MockDisposableResourceMockRecorder is the mock recorder for MockDisposableResource.
type MockDisposableResourceMockRecorder struct {
	mock *MockDisposableResource
}

// NewMockDisposableResource creates a new mock instance.
func NewMockDisposableResource(ctrl *gomock.Controller) *MockDisposableResource {
	mock := &MockDisposableResource{ctrl: ctrl}
	mock.recorder = &MockDisposableResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisposableResource) EXPECT() *MockDisposableResourceMockRecorder {
	return m.recorder
}

// Dispose mocks base method.
func (m *MockDisposableResource) Dispose(arg0 context.Context, arg1 db.DatabaseQueries) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispose", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispose indicates an expected call of Dispose.
func (mr *MockDisposableResourceMockRecorder) Dispose(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockDisposableResource)(nil).Dispose), arg0, arg1)
}
