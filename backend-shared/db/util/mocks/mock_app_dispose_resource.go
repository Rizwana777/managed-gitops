// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redhat-appstudio/managed-gitops/backend-shared/db (interfaces: AppScopedDisposableResource)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/redhat-appstudio/managed-gitops/backend-shared/db"
)

// MockAppScopedDisposableResource is a mock of AppScopedDisposableResource interface.
type MockAppScopedDisposableResource struct {
	ctrl     *gomock.Controller
	recorder *MockAppScopedDisposableResourceMockRecorder
}

// MockAppScopedDisposableResourceMockRecorder is the mock recorder for MockAppScopedDisposableResource.
type MockAppScopedDisposableResourceMockRecorder struct {
	mock *MockAppScopedDisposableResource
}

// NewMockAppScopedDisposableResource creates a new mock instance.
func NewMockAppScopedDisposableResource(ctrl *gomock.Controller) *MockAppScopedDisposableResource {
	mock := &MockAppScopedDisposableResource{ctrl: ctrl}
	mock.recorder = &MockAppScopedDisposableResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppScopedDisposableResource) EXPECT() *MockAppScopedDisposableResourceMockRecorder {
	return m.recorder
}

// DisposeAppScoped mocks base method.
func (m *MockAppScopedDisposableResource) DisposeAppScoped(arg0 context.Context, arg1 db.ApplicationScopedQueries) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisposeAppScoped", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisposeAppScoped indicates an expected call of DisposeAppScoped.
func (mr *MockAppScopedDisposableResourceMockRecorder) DisposeAppScoped(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisposeAppScoped", reflect.TypeOf((*MockAppScopedDisposableResource)(nil).DisposeAppScoped), arg0, arg1)
}
